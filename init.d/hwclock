#!/sbin/runscript
# Copyright 2007-2008 Roy Marples <roy@marples.name>
# All rights reserved. Released under the 2-clause BSD license.

extra_commands="save show"

description="Sets the local clock to UTC or Local Time." 
description_save="Saves the current time in the BIOS."
description_show="Displays the current time in the BIOS."

clock_args=${clock_args:-${CLOCK_OPTS}}
clock_systohc=${clock_systohc:-${CLOCK_SYSTOHC}}

clock=${clock:-${CLOCK:-UTC}}
if [ "${clock}" = "UTC" ]; then
	utc="UTC"
	utc_cmd="--utc"
else
	utc="Local Time"
	utc_cmd="--localtime"
fi

setupopts()
{
	case "${utc}" in
		UTC|Local" "Time);;
		*) unset utc_cmd;;
	esac
}

# hwclock doesn't always return non zero on error
_hwclock()
{
	local err="$(hwclock "$@" 2>&1 >/dev/null)"

	[ -z "${err}" ] && return 0
	echo "${err}" >&2
	return 1
}

start()
{
	local retval=0 errstr=""
	setupopts

	if [ -z "${utc_cmd}" ]; then
		ewarn "Not setting clock for ${utc} system"
		return 0
	fi

	ebegin "Setting system clock using the hardware clock [${utc}]"
	if [ -e /proc/modules -a ! -e /dev/rtc ]; then
		modprobe -q rtc || modprobe -q genrtc
	fi

	# If setting UTC, don't bother to run hwclock when first booting
	# as that's the default
	if [ "${PREVLEVEL}" != "N" -o \
		"${utc_cmd}" != "--utc" -o \
		-n "${clock_args}" ];
	then
		_hwclock --hctosys ${utc_cmd} ${clock_args}
		retval=$((${retval} + $?))
	fi
	
	eend ${retval} "Failed to set the system clock"

	return 0
}

stop()
{
	yesno ${clock_systohc} || return 0

	local retval=0 errstr=""
	setupopts

	[ -z "${utc_cmd}" ] && return 0

	ebegin "Setting hardware clock using the system clock" "[${utc}]"

	_hwclock --systohc ${utc_cmd} ${clock_args}
	retval=$?

	eend ${retval} "Failed to sync clocks" 
}

save()
{
	clock_systohc="yes"
	stop
}

show()
{
	setupopts
	hwclock --show "${utc_cmd}" ${clock_args} 
}
